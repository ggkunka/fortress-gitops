[tool.poetry]
name = "mcp-security-platform"
version = "0.1.0"
description = "A comprehensive, pluggable security assessment platform for MCP environments"
authors = ["MCP Security Team <security@mcp-platform.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your-org/mcp-security-platform"
repository = "https://github.com/your-org/mcp-security-platform"
documentation = "https://docs.mcp-security-platform.com"
keywords = ["security", "vulnerability", "scanning", "kubernetes", "microservices"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
redis = "^5.0.1"
celery = "^5.3.4"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
httpx = "^0.25.2"
aiofiles = "^23.2.1"
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
typer = "^0.9.0"
rich = "^13.7.0"
structlog = "^23.2.0"
prometheus-client = "^0.19.0"
kubernetes = "^28.1.0"
helm = "^3.13.0"
jinja2 = "^3.1.2"
pyyaml = "^6.0.1"
cryptography = "^41.0.8"
bcrypt = "^4.1.2"
email-validator = "^2.1.0"
python-dateutil = "^2.8.2"
click = "^8.1.7"
anyio = "^4.2.0"
tenacity = "^8.2.3"
validators = "^0.22.0"
# MCP Protocol dependencies
mcp = "^1.0.0"
websockets = "^12.0"
sse-starlette = "^1.8.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
coverage = "^7.3.2"
faker = "^20.1.0"
factory-boy = "^3.3.0"
respx = "^0.20.2"
pytest-xdist = "^3.5.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocs-swagger-ui-tag = "^0.6.8"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.scripts]
mcp-auth = "services.auth.main:app"
mcp-gateway = "services.gateway.main:app"
mcp-scanner = "services.scanner_manager.main:app"
mcp-analyzer = "services.vulnerability_analyzer.main:app"
mcp-reports = "services.report_generator.main:app"
mcp-notifications = "services.notification.main:app"
mcp-security-server = "services.mcp_server.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "kubernetes.*",
    "helm.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov=shared",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["services", "shared"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]