# API Gateway Service Containerfile
# Multi-stage build for security and efficiency
FROM registry.access.redhat.com/ubi9/ubi:latest AS builder

# Build arguments
ARG PYTHON_VERSION=3.11
ARG SERVICE=gateway
ARG VERSION=0.1.0
ARG COMMIT_SHA

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN dnf update -y && \
    dnf install -y \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-pip \
        python${PYTHON_VERSION}-devel \
        gcc \
        gcc-c++ \
        make \
        openssl-devel \
        libffi-devel \
        && \
    dnf clean all && \
    rm -rf /var/cache/dnf

# Create build directory
WORKDIR /build

# Copy requirements
COPY requirements.txt /build/

# Install Python dependencies
RUN python${PYTHON_VERSION} -m pip install --upgrade pip && \
    python${PYTHON_VERSION} -m pip install --user -r requirements.txt

# Copy source code
COPY . /build/

# Build application
RUN python${PYTHON_VERSION} -m pip install --user .

# Production stage
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

# Metadata
LABEL maintainer="MCP Security Team <security@mcp-platform.com>" \
      description="API Gateway service for MCP Security Assessment Platform" \
      version="${VERSION}" \
      vendor="MCP Security Platform" \
      service="${SERVICE}" \
      commit="${COMMIT_SHA}"

# Build arguments
ARG PYTHON_VERSION=3.11
ARG SERVICE=gateway
ARG VERSION=0.1.0
ARG BUILD_DATE
ARG VCS_REF

# Environment variables
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PATH=/app/.local/bin:$PATH \
    SERVICE_NAME=${SERVICE} \
    SERVICE_VERSION=${VERSION} \
    BUILD_DATE=${BUILD_DATE} \
    VCS_REF=${VCS_REF}

# Install runtime dependencies
RUN microdnf update -y && \
    microdnf install -y \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-pip \
        ca-certificates \
        shadow-utils \
        curl \
        && \
    microdnf clean all && \
    rm -rf /var/cache/yum

# Create non-root user
RUN groupadd -r -g 1000 mcp && \
    useradd -r -g mcp -u 1000 -d /app -s /bin/bash mcp

# Create application directories
RUN mkdir -p /app/logs /app/data /app/tmp /app/config && \
    chown -R mcp:mcp /app

# Copy built application from builder stage
COPY --from=builder --chown=mcp:mcp /root/.local /app/.local
COPY --from=builder --chown=mcp:mcp /build/services/${SERVICE} /app/services/${SERVICE}
COPY --from=builder --chown=mcp:mcp /build/shared /app/shared

# Copy configuration files
COPY --chown=mcp:mcp deployments/docker/config/${SERVICE}.yaml /app/config/

# Security configurations
RUN echo "auth required pam_wheel.so use_uid" >> /etc/pam.d/su && \
    chmod 755 /app && \
    chmod -R 750 /app/config && \
    chmod -R 755 /app/logs /app/data /app/tmp

# Switch to non-root user
USER mcp

# Set working directory
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose service port
EXPOSE 8000

# Start the service
CMD ["python", "-m", "uvicorn", "services.gateway.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]