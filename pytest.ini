[tool:pytest]
# Pytest configuration for MCP Security Platform

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 7.0

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=80
    --asyncio-mode=auto
    -p no:warnings

# Custom markers
markers =
    unit: Unit tests
    integration: Integration tests
    api: API endpoint tests
    auth: Authentication and authorization tests
    security: Security-related tests
    performance: Performance tests
    slow: Slow tests (>1 second)
    database: Tests requiring database
    external: Tests requiring external services
    smoke: Smoke tests for basic functionality

# Async settings
asyncio_mode = auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:sqlalchemy.*
    ignore::UserWarning:asyncio.*

# Test timeout (in seconds)
timeout = 300

# Pytest-xdist settings (for parallel execution)
# addopts = --numprocesses=auto

# Coverage settings
[coverage:run]
source = .
omit = 
    tests/*
    */migrations/*
    */venv/*
    */env/*
    */__pycache__/*
    */node_modules/*
    */build/*
    */dist/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml