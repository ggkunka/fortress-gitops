#!/bin/bash
# Fortress Security Platform - Complete End-to-End Validation Suite

set -e

echo "üè∞ FORTRESS SECURITY PLATFORM - COMPLETE VALIDATION"
echo "=================================================="

FORTRESS_HOST="10.63.89.182"
FORTRESS_PORT="30080"

# Test 1: Database Stack Validation
test_database_stack() {
    echo ""
    echo "üß™ TEST 1: Database Stack Validation"
    echo "-----------------------------------"
    
    # PostgreSQL
    kubectl get pods -n fortress-system -l app=fortress-postgresql | grep Running && echo "‚úÖ PostgreSQL operational" || echo "‚ùå PostgreSQL issues"
    
    # Redis
    kubectl get pods -n fortress-system -l app=fortress-redis | grep Running && echo "‚úÖ Redis operational" || echo "‚ùå Redis issues"
    
    # Elasticsearch
    kubectl get pods -n fortress-system -l app=fortress-elasticsearch | grep Running && echo "‚úÖ Elasticsearch operational" || echo "‚ùå Elasticsearch issues"
    
    # Check Istio sidecars
    POSTGRES_CONTAINERS=$(kubectl get pod -n fortress-system -l app=fortress-postgresql -o jsonpath='{.items[0].spec.containers[*].name}' | wc -w)
    [ "$POSTGRES_CONTAINERS" -ge 2 ] && echo "‚úÖ PostgreSQL has Istio sidecar" || echo "‚ùå PostgreSQL missing Istio sidecar"
}

# Test 2: Harbor Registry Validation
test_harbor_registry() {
    echo ""
    echo "üß™ TEST 2: Harbor Registry Validation"
    echo "------------------------------------"
    
    # Harbor pod status
    kubectl get pods -n harbor-system -l app=harbor-registry | grep Running && echo "‚úÖ Harbor operational" || echo "‚ùå Harbor issues"
    
    # Test Registry API
    curl -k -I --connect-timeout 10 "http://$FORTRESS_HOST:30500/v2/" && echo "‚úÖ Registry API accessible" || echo "‚ö†Ô∏è Registry API not ready"
    
    # Test Harbor UI
    curl -k -I --connect-timeout 10 "http://$FORTRESS_HOST:30443/" && echo "‚úÖ Harbor UI accessible" || echo "‚ö†Ô∏è Harbor UI not ready"
}

# Test 3: Core Services Validation
test_core_services() {
    echo ""
    echo "üß™ TEST 3: Core Services Validation"
    echo "----------------------------------"
    
    # Check core services
    for service in fortress-auth fortress-web fortress-gateway fortress-scan-orchestrator; do
        kubectl get pods -n fortress-system -l app=$service | grep Running && echo "‚úÖ $service operational" || echo "‚ùå $service issues"
    done
    
    # Test main web interface
    curl -I --connect-timeout 10 "http://$FORTRESS_HOST:$FORTRESS_PORT/" && echo "‚úÖ Main web interface accessible" || echo "‚ö†Ô∏è Web interface not ready"
}

# Test 4: Istio Service Mesh Validation
test_istio_mesh() {
    echo ""
    echo "üß™ TEST 4: Istio Service Mesh Validation"
    echo "---------------------------------------"
    
    # Check Istio Gateway
    kubectl get gateway -n fortress-system fortress-main-gateway && echo "‚úÖ Main Gateway configured" || echo "‚ùå Gateway missing"
    
    # Check VirtualServices
    kubectl get virtualservice -n fortress-system fortress-main && echo "‚úÖ Main VirtualService configured" || echo "‚ùå VirtualService missing"
    
    # Check mTLS policies
    kubectl get peerauthentication -n fortress-system fortress-mtls-global && echo "‚úÖ Global mTLS policy active" || echo "‚ùå mTLS policy missing"
    
    # Count services with sidecars
    SIDECAR_COUNT=$(kubectl get pods -n fortress-system -o jsonpath='{.items[*].spec.containers[*].name}' | tr ' ' '\n' | grep -c istio-proxy || echo "0")
    echo "üìä Services with Istio sidecars: $SIDECAR_COUNT"
}

# Test 5: Agent Communication Validation
test_agent_communication() {
    echo ""
    echo "üß™ TEST 5: Agent Communication Validation"
    echo "----------------------------------------"
    
    # Check ServiceEntry for agents
    kubectl get serviceentry -n fortress-system fortress-agents && echo "‚úÖ Agent ServiceEntry configured" || echo "‚ùå Agent ServiceEntry missing"
    
    # Check DestinationRule for agents
    kubectl get destinationrule -n fortress-system fortress-agent-communication && echo "‚úÖ Agent DestinationRule configured" || echo "‚ùå Agent DestinationRule missing"
    
    # Test orchestrator API
    curl -I --connect-timeout 10 "http://$FORTRESS_HOST:$FORTRESS_PORT/api/scan/health" && echo "‚úÖ Scan orchestrator API accessible" || echo "‚ö†Ô∏è Orchestrator API not ready"
}

# Test 6: End-to-End Security Workflow
test_security_workflow() {
    echo ""
    echo "üß™ TEST 6: End-to-End Security Workflow"
    echo "--------------------------------------"
    
    # Test auth endpoint
    curl -X POST -H "Content-Type: application/json" -d '{"username":"test","password":"test"}' --connect-timeout 10 "http://$FORTRESS_HOST:$FORTRESS_PORT/api/auth/login" && echo "‚úÖ Auth service responsive" || echo "‚ö†Ô∏è Auth service not ready"
    
    # Test scan trigger
    curl -X POST -H "Content-Type: application/json" -d '{"cluster":"test","namespace":"default","tenant":"test"}' --connect-timeout 10 "http://$FORTRESS_HOST:$FORTRESS_PORT/api/scan/analyze" && echo "‚úÖ Scan orchestration responsive" || echo "‚ö†Ô∏è Scan service not ready"
}

# Test 7: Performance and Resource Validation
test_performance() {
    echo ""
    echo "üß™ TEST 7: Performance & Resource Validation"
    echo "-------------------------------------------"
    
    # Check resource usage
    echo "üìä Node resource usage:"
    kubectl top nodes 2>/dev/null || echo "‚ö†Ô∏è Metrics server not available"
    
    echo "üìä Pod resource usage:"
    kubectl top pods -n fortress-system 2>/dev/null || echo "‚ö†Ô∏è Pod metrics not available"
    
    # Check pod readiness
    READY_PODS=$(kubectl get pods -n fortress-system --no-headers | grep Running | grep -c "1/1\|2/2\|3/3\|4/4" || echo "0")
    TOTAL_PODS=$(kubectl get pods -n fortress-system --no-headers | wc -l)
    echo "üìä Ready pods: $READY_PODS/$TOTAL_PODS"
}

# Execute all tests
echo "üöÄ Starting Fortress Security Platform validation..."

test_database_stack
test_harbor_registry  
test_core_services
test_istio_mesh
test_agent_communication
test_security_workflow
test_performance

echo ""
echo "‚úÖ FORTRESS SECURITY PLATFORM VALIDATION COMPLETE!"
echo ""
echo "üè∞ FORTRESS STATUS SUMMARY:"
echo "- Database Stack: PostgreSQL, Redis, Elasticsearch with Istio"
echo "- Harbor Registry: Secure image registry with mTLS"
echo "- Core Services: Auth, Gateway, Web, Orchestrator"
echo "- Service Mesh: Complete Istio integration with mTLS"
echo "- Agent Communication: Secure cluster-to-cluster communication"
echo "- External Access: http://$FORTRESS_HOST:$FORTRESS_PORT"
echo ""
echo "üîê Enterprise CNAPP Platform Ready!"
