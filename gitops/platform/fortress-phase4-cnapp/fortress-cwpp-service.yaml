apiVersion: v1
kind: ConfigMap
metadata:
  name: fortress-cwpp-code
  namespace: mcp-security
data:
  main.py: |
    from fastapi import FastAPI
    import uvicorn, json, requests
    from datetime import datetime
    
    app = FastAPI(title="Fortress CWPP - Cloud Workload Protection Platform", version="1.0.0")
    
    @app.post("/cwpp/runtime-protection")
    async def runtime_security_monitoring(runtime_data: dict):
        """Runtime security (eBPF agents) + container scanning (Anchore agents) + DAST"""
        workload_id = runtime_data.get("workload_id", "unknown")
        
        # eBPF runtime monitoring results
        ebpf_events = [
            {"type": "process_injection", "severity": "HIGH", "process": "suspicious_binary", "pid": 12345},
            {"type": "network_anomaly", "severity": "MEDIUM", "connection": "unknown_endpoint", "port": 4444},
            {"type": "file_access", "severity": "LOW", "file": "/etc/passwd", "process": "backup_script"}
        ]
        
        # Container scanning results (Anchore integration)
        container_vulns = [
            {"cve": "CVE-2023-5678", "severity": "CRITICAL", "package": "openssl", "version": "1.1.1k"},
            {"cve": "CVE-2023-1234", "severity": "HIGH", "package": "curl", "version": "7.68.0"}
        ]
        
        # DAST results 
        dast_findings = [
            {"vulnerability": "SQL Injection", "endpoint": "/api/users", "risk": "HIGH"},
            {"vulnerability": "XSS", "endpoint": "/search", "risk": "MEDIUM"}
        ]
        
        # Runtime threat detection
        threat_score = 8.5 if any(event["severity"] == "HIGH" for event in ebpf_events) else 4.2
        
        return {
            "workload_id": workload_id,
            "runtime_events": ebpf_events,
            "container_vulnerabilities": container_vulns,
            "dast_findings": dast_findings,
            "threat_score": threat_score,
            "protection_status": "ACTIVE",
            "agent_integration": {"ebpf": True, "anchore": True, "dast": True}
        }
    
    @app.get("/cwpp/workload-inventory")
    async def get_workload_inventory():
        return {
            "total_workloads": 1247,
            "protected_workloads": 1134,
            "runtime_monitoring": {"active": 1089, "agents_deployed": 45},
            "container_scanning": {"images_scanned": 2341, "vulnerabilities": 156}
        }
    
    @app.get("/health")
    def health():
        return {"status": "healthy", "service": "cwpp", "capabilities": ["runtime_security", "container_scanning", "dast"]}
    
    if __name__ == "__main__": uvicorn.run(app, host="0.0.0.0", port=8098)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-cwpp-service
  namespace: mcp-security
  annotations:
    sidecar.istio.io/inject: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fortress-cwpp-service
  template:
    metadata:
      labels:
        app: fortress-cwpp-service
    spec:
      containers:
      - name: cwpp-service
        image: python:3.11-slim
        env:
        - name: HTTP_PROXY
          value: "http://10.158.100.6:8080"
        - name: RUNTIME_AGENTS
          value: "ebpf,anchore,dast"
        volumeMounts:
        - name: code
          mountPath: /app
        command: ["bash", "-c", "cd /app && pip install fastapi uvicorn requests && python main.py"]
        ports:
        - containerPort: 8098
      volumes:
      - name: code
        configMap:
          name: fortress-cwpp-code
---
apiVersion: v1
kind: Service
metadata:
  name: fortress-cwpp-service
  namespace: mcp-security
spec:
  selector:
    app: fortress-cwpp-service
  ports:
  - port: 8098
