apiVersion: v1
kind: ConfigMap
metadata:
  name: fortress-dspm-code
  namespace: mcp-security
data:
  main.py: |
    from fastapi import FastAPI
    import uvicorn, json, requests
    from datetime import datetime
    
    app = FastAPI(title="Fortress DSPM - Data Security Posture Management", version="1.0.0")
    
    @app.post("/dspm/classify-data")
    async def classify_and_monitor_data(data_request: dict):
        """Data classification + Agent-based data flow monitoring + encryption validation"""
        data_sources = data_request.get("sources", [])
        
        # Data classification
        classified_data = []
        for source in data_sources:
            classification = {
                "source": source.get("name", "unknown"),
                "type": source.get("type", "database"),
                "sensitivity": "HIGH" if "pii" in source.get("content", "") else "MEDIUM",
                "data_types": ["PII", "Financial", "Health"] if source.get("regulated", False) else ["Internal"],
                "encryption_status": source.get("encrypted", False)
            }
            classified_data.append(classification)
        
        # Agent-based data flow monitoring
        data_flows = [
            {
                "source": "customer_db",
                "destination": "analytics_service", 
                "data_types": ["PII", "Financial"],
                "encryption_in_transit": True,
                "compliance_violation": False
            },
            {
                "source": "payment_processor",
                "destination": "external_api",
                "data_types": ["PCI"],
                "encryption_in_transit": False,
                "compliance_violation": True,
                "risk": "CRITICAL"
            }
        ]
        
        # Encryption validation
        encryption_status = {
            "data_at_rest": {"encrypted": 892, "unencrypted": 45, "compliance": 95.2},
            "data_in_transit": {"encrypted": 1247, "unencrypted": 12, "compliance": 99.1},
            "key_management": {"rotated_keys": 234, "expired_keys": 3, "compliance": 98.7}
        }
        
        return {
            "classification_id": f"dspm-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
            "classified_data": classified_data,
            "data_flows": data_flows,
            "encryption_status": encryption_status,
            "compliance_score": 96.8,
            "violations": [flow for flow in data_flows if flow.get("compliance_violation")],
            "agent_monitoring": "active"
        }
    
    @app.get("/dspm/data-inventory")
    async def get_data_inventory():
        return {
            "total_data_assets": 2847,
            "sensitive_data": {"pii": 567, "financial": 234, "health": 156, "secrets": 89},
            "data_stores": {"databases": 45, "object_storage": 123, "file_systems": 67},
            "protection_status": {"encrypted": 95.2, "access_controlled": 98.7, "monitored": 92.1}
        }
    
    @app.get("/health")
    def health():
        return {"status": "healthy", "service": "dspm", "capabilities": ["data_classification", "flow_monitoring", "encryption_validation"]}
    
    if __name__ == "__main__": uvicorn.run(app, host="0.0.0.0", port=8100)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fortress-dspm-service
  namespace: mcp-security
  annotations:
    sidecar.istio.io/inject: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fortress-dspm-service
  template:
    metadata:
      labels:
        app: fortress-dspm-service
    spec:
      containers:
      - name: dspm-service
        image: python:3.11-slim
        env:
        - name: HTTP_PROXY
          value: "http://10.158.100.6:8080"
        - name: DATA_SOURCES
          value: "postgres,mongodb,s3,gcs"
        volumeMounts:
        - name: code
          mountPath: /app
        command: ["bash", "-c", "cd /app && pip install fastapi uvicorn requests && python main.py"]
        ports:
        - containerPort: 8100
      volumes:
      - name: code
        configMap:
          name: fortress-dspm-code
---
apiVersion: v1
kind: Service
metadata:
  name: fortress-dspm-service
  namespace: mcp-security
spec:
  selector:
    app: fortress-dspm-service
  ports:
  - port: 8100
