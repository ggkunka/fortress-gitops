apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: mcp-security
data:
  redis.conf: |
    bind 0.0.0.0
    port 6379
    protected-mode no
    save 900 1
    save 300 10
    save 60 10000
    appendonly yes
    appendfsync everysec
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-simple
  namespace: mcp-security
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            cpu: 25m
            memory: 32Mi
          limits:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - name: config
          mountPath: /usr/local/etc/redis
        command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        livenessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: redis-config
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-platform-redis-master
  namespace: mcp-security
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: mcp-security
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS mcp_security;
    CREATE USER IF NOT EXISTS mcp_user WITH PASSWORD 'mcp_password';
    GRANT ALL PRIVILEGES ON DATABASE mcp_security TO mcp_user;
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-simple
  namespace: mcp-security
  labels:
    app: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:13-alpine
        ports:
        - containerPort: 5432
        resources:
          requests:
            cpu: 25m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        env:
        - name: POSTGRES_PASSWORD
          value: "mcp_password"
        - name: POSTGRES_USER
          value: "mcp_user"
        - name: POSTGRES_DB
          value: "mcp_security"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "mcp_user", "-d", "mcp_security"]
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "mcp_user", "-d", "mcp_security"]
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-platform-postgresql
  namespace: mcp-security
  labels:
    app: postgresql
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432