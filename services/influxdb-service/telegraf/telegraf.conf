# Telegraf Configuration for MCP Security Platform

# Global tags
[global_tags]
  environment = "production"
  service = "mcp-security-platform"

# Agent configuration
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# InfluxDB v2 output
[[outputs.influxdb_v2]]
  urls = ["$INFLUXDB_URL"]
  token = "$INFLUXDB_TOKEN"
  organization = "$INFLUXDB_ORG"
  bucket = "$INFLUXDB_BUCKET"
  timeout = "5s"
  user_agent = "telegraf"

# System metrics
[[inputs.system]]
  fielddrop = ["uptime_format"]

# CPU metrics
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

# Memory metrics
[[inputs.mem]]

# Disk metrics
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Network metrics
[[inputs.net]]
  interfaces = ["eth0", "lo"]

# Docker metrics
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_name_include = []
  container_name_exclude = []
  timeout = "5s"
  docker_label_include = []
  docker_label_exclude = []
  perdevice = true
  total = false

# Process metrics
[[inputs.processes]]

# Kernel metrics
[[inputs.kernel]]

# Swap metrics
[[inputs.swap]]

# Netstat metrics
[[inputs.netstat]]

# Interrupts metrics
[[inputs.interrupts]]

# Linux sysstat metrics
[[inputs.linux_sysstat_metrics]]

# HTTP response metrics for health checks
[[inputs.http_response]]
  urls = [
    "http://mcp-influxdb-service:8011/health",
    "http://mcp-mongodb-service:8010/health"
  ]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = false

# Redis metrics
[[inputs.redis]]
  servers = ["tcp://redis:6379"]
  password = ""

# InfluxDB metrics
[[inputs.influxdb]]
  urls = ["http://influxdb:8086/debug/vars"]
  timeout = "5s"

# Custom security metrics from log files
[[inputs.tail]]
  files = ["/app/logs/*.log"]
  from_beginning = false
  pipe = false
  watch_method = "inotify"
  data_format = "json"
  json_name_key = "measurement"
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  tag_keys = ["level", "service", "component"]
  fielddrop = ["host"]

# Prometheus metrics scraping
[[inputs.prometheus]]
  urls = ["http://mcp-influxdb-service:8011/metrics"]
  response_timeout = "5s"
  metric_version = 2
  name_override = "mcp_prometheus"

# SNMP metrics (if applicable)
# [[inputs.snmp]]
#   agents = ["udp://127.0.0.1:161"]
#   version = 2
#   community = "public"
#   interval = "60s"
#   timeout = "10s"
#   retries = 3

# Syslog input for security events
[[inputs.syslog]]
  server = "udp://:514"
  best_effort = true
  syslog_standard = "RFC3164"

# Webhook input for external metrics
[[inputs.webhooks]]
  service_address = ":1619"
  [inputs.webhooks.github]
    path = "/github"
  [inputs.webhooks.mandrill]
    path = "/mandrill"
  [inputs.webhooks.rollbar]
    path = "/rollbar"

# File input for custom metrics
[[inputs.file]]
  files = ["/app/data/metrics/*.json"]
  data_format = "json"
  json_name_key = "measurement"
  json_time_key = "timestamp"
  json_time_format = "2006-01-02T15:04:05Z07:00"
  tag_keys = ["service", "environment", "component"]

# Processor plugins
[[processors.regex]]
  [[processors.regex.tags]]
    key = "service"
    pattern = "^mcp-(.*)$"
    replacement = "${1}"

[[processors.strings]]
  [[processors.strings.lowercase]]
    tag = "service"

# Aggregator plugins
[[aggregators.minmax]]
  period = "30s"
  drop_original = false
  stats = ["min", "max"]

[[aggregators.basicstats]]
  period = "30s"
  drop_original = false
  stats = ["count", "min", "max", "mean", "stdev", "s2", "sum"]