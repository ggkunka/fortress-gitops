"""
Analysis Models

Data models for vulnerability analysis requests and results.
"""

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class AnalysisType(str, Enum):
    """Analysis type enumeration."""
    TREND_ANALYSIS = "trend_analysis"
    BASELINE_COMPARISON = "baseline_comparison"
    ANOMALY_DETECTION = "anomaly_detection"
    RISK_ASSESSMENT = "risk_assessment"
    PATTERN_ANALYSIS = "pattern_analysis"
    COMPREHENSIVE = "comprehensive"


class AnalysisStatus(str, Enum):
    """Analysis status enumeration."""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class SeverityLevel(str, Enum):
    """Vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    NEGLIGIBLE = "negligible"
    UNKNOWN = "unknown"


class TrendDirection(str, Enum):
    """Trend direction enumeration."""
    INCREASING = "increasing"
    DECREASING = "decreasing"
    STABLE = "stable"
    VOLATILE = "volatile"


class AnomalySeverity(str, Enum):
    """Anomaly severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class AnalysisRequest(BaseModel):
    """Request model for vulnerability analysis."""
    target: str = Field(..., description="Target to analyze")
    analysis_types: List[AnalysisType] = Field(default=[AnalysisType.COMPREHENSIVE], description="Types of analysis to perform")
    time_range: str = Field(default="7d", description="Time range for analysis (7d, 30d, 90d)")
    include_historical: bool = Field(default=True, description="Include historical data")
    severity_filter: Optional[List[SeverityLevel]] = Field(None, description="Filter by severity levels")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class AnalysisResult(BaseModel):
    """Result model for vulnerability analysis."""
    analysis_id: str = Field(..., description="Unique analysis identifier")
    target: str = Field(..., description="Analyzed target")
    status: AnalysisStatus = Field(..., description="Analysis status")
    analysis_types: List[AnalysisType] = Field(..., description="Types of analysis performed")
    created_at: datetime = Field(..., description="Analysis creation time")
    started_at: Optional[datetime] = Field(None, description="Analysis start time")
    completed_at: Optional[datetime] = Field(None, description="Analysis completion time")
    duration: Optional[float] = Field(None, description="Analysis duration in seconds")
    message: str = Field(..., description="Status message")
    
    # Analysis results
    trend_analysis: Optional["VulnerabilityTrend"] = Field(None, description="Trend analysis results")
    baseline_comparison: Optional["BaselineComparison"] = Field(None, description="Baseline comparison results")
    anomaly_detection: Optional[List["AnomalyDetection"]] = Field(None, description="Detected anomalies")
    risk_assessment: Optional["RiskAssessment"] = Field(None, description="Risk assessment results")
    pattern_analysis: Optional[Dict[str, Any]] = Field(None, description="Pattern analysis results")
    
    # Summary
    total_vulnerabilities: int = Field(default=0, description="Total vulnerabilities analyzed")
    severity_distribution: Dict[str, int] = Field(default_factory=dict, description="Distribution by severity")
    key_findings: List[str] = Field(default_factory=list, description="Key findings from analysis")
    recommendations: List[str] = Field(default_factory=list, description="Recommendations")
    
    error_message: Optional[str] = Field(None, description="Error message if failed")


class VulnerabilityTrend(BaseModel):
    """Vulnerability trend analysis."""
    target: str = Field(..., description="Target being analyzed")
    time_range: str = Field(..., description="Time range of analysis")
    trend_direction: TrendDirection = Field(..., description="Overall trend direction")
    trend_strength: float = Field(..., description="Trend strength (0-1)")
    
    # Data points
    data_points: List[Dict[str, Any]] = Field(..., description="Trend data points")
    total_vulnerabilities: int = Field(..., description="Total vulnerabilities in period")
    new_vulnerabilities: int = Field(..., description="New vulnerabilities detected")
    resolved_vulnerabilities: int = Field(..., description="Resolved vulnerabilities")
    
    # Severity trends
    severity_trends: Dict[str, TrendDirection] = Field(default_factory=dict, description="Trends by severity")
    severity_changes: Dict[str, int] = Field(default_factory=dict, description="Changes by severity")
    
    # Insights
    key_insights: List[str] = Field(default_factory=list, description="Key trend insights")
    forecast: Optional[Dict[str, Any]] = Field(None, description="Vulnerability forecast")
    
    generated_at: datetime = Field(..., description="Analysis generation time")


class BaselineComparison(BaseModel):
    """Baseline comparison results."""
    target: str = Field(..., description="Target being compared")
    baseline_date: datetime = Field(..., description="Baseline creation date")
    comparison_date: datetime = Field(..., description="Comparison date")
    
    # Comparison metrics
    baseline_vulnerabilities: int = Field(..., description="Vulnerabilities in baseline")
    current_vulnerabilities: int = Field(..., description="Current vulnerabilities")
    new_vulnerabilities: int = Field(..., description="New vulnerabilities since baseline")
    resolved_vulnerabilities: int = Field(..., description="Resolved vulnerabilities since baseline")
    
    # Severity comparison
    severity_comparison: Dict[str, Dict[str, int]] = Field(default_factory=dict, description="Severity level comparison")
    
    # Drift analysis
    drift_score: float = Field(..., description="Drift score (0-1, higher = more drift)")
    drift_categories: Dict[str, int] = Field(default_factory=dict, description="Drift by category")
    
    # Significant changes
    significant_changes: List[Dict[str, Any]] = Field(default_factory=list, description="Significant changes detected")
    compliance_impact: Optional[Dict[str, Any]] = Field(None, description="Compliance impact assessment")
    
    # Recommendations
    recommendations: List[str] = Field(default_factory=list, description="Recommendations based on comparison")
    
    generated_at: datetime = Field(..., description="Comparison generation time")


class AnomalyDetection(BaseModel):
    """Anomaly detection result."""
    anomaly_id: str = Field(..., description="Unique anomaly identifier")
    target: str = Field(..., description="Target where anomaly was detected")
    anomaly_type: str = Field(..., description="Type of anomaly")
    severity: AnomalySeverity = Field(..., description="Anomaly severity")
    confidence: float = Field(..., description="Confidence score (0-1)")
    
    # Anomaly details
    description: str = Field(..., description="Anomaly description")
    detected_at: datetime = Field(..., description="Detection timestamp")
    data_points: List[Dict[str, Any]] = Field(default_factory=list, description="Relevant data points")
    
    # Context
    expected_value: Optional[float] = Field(None, description="Expected value")
    actual_value: Optional[float] = Field(None, description="Actual value")
    deviation: Optional[float] = Field(None, description="Deviation from expected")
    
    # Impact assessment
    potential_impact: str = Field(..., description="Potential impact description")
    affected_components: List[str] = Field(default_factory=list, description="Affected components")
    
    # Recommendations
    recommended_actions: List[str] = Field(default_factory=list, description="Recommended actions")
    urgency: str = Field(..., description="Urgency level")
    
    # Status
    status: str = Field(default="active", description="Anomaly status")
    resolved_at: Optional[datetime] = Field(None, description="Resolution timestamp")


class RiskAssessment(BaseModel):
    """Risk assessment results."""
    target: str = Field(..., description="Target being assessed")
    assessment_date: datetime = Field(..., description="Assessment date")
    
    # Overall risk
    overall_risk_score: float = Field(..., description="Overall risk score (0-10)")
    overall_risk_level: str = Field(..., description="Overall risk level")
    
    # Risk factors
    vulnerability_risk: float = Field(..., description="Risk from vulnerabilities")
    exposure_risk: float = Field(..., description="Risk from exposure")
    impact_risk: float = Field(..., description="Risk from potential impact")
    
    # Risk breakdown
    risk_by_severity: Dict[str, float] = Field(default_factory=dict, description="Risk breakdown by severity")
    risk_by_category: Dict[str, float] = Field(default_factory=dict, description="Risk breakdown by category")
    
    # Critical vulnerabilities
    critical_vulnerabilities: List[Dict[str, Any]] = Field(default_factory=list, description="Critical vulnerabilities")
    high_risk_packages: List[Dict[str, Any]] = Field(default_factory=list, description="High-risk packages")
    
    # Business context
    business_impact: Optional[Dict[str, Any]] = Field(None, description="Business impact assessment")
    compliance_risks: List[str] = Field(default_factory=list, description="Compliance risks")
    
    # Mitigation
    mitigation_strategies: List[Dict[str, Any]] = Field(default_factory=list, description="Mitigation strategies")
    priority_actions: List[str] = Field(default_factory=list, description="Priority actions")
    
    # Trends
    risk_trend: Optional[TrendDirection] = Field(None, description="Risk trend direction")
    risk_forecast: Optional[Dict[str, Any]] = Field(None, description="Risk forecast")
    
    generated_at: datetime = Field(..., description="Assessment generation time")


class PatternAnalysis(BaseModel):
    """Pattern analysis results."""
    target: str = Field(..., description="Target analyzed")
    analysis_period: str = Field(..., description="Analysis period")
    
    # Vulnerability patterns
    common_vulnerabilities: List[Dict[str, Any]] = Field(default_factory=list, description="Common vulnerability types")
    vulnerability_clusters: List[Dict[str, Any]] = Field(default_factory=list, description="Vulnerability clusters")
    package_patterns: List[Dict[str, Any]] = Field(default_factory=list, description="Package vulnerability patterns")
    
    # Temporal patterns
    temporal_patterns: List[Dict[str, Any]] = Field(default_factory=list, description="Temporal vulnerability patterns")
    seasonal_trends: List[Dict[str, Any]] = Field(default_factory=list, description="Seasonal trends")
    
    # Correlation patterns
    correlations: List[Dict[str, Any]] = Field(default_factory=list, description="Vulnerability correlations")
    dependency_patterns: List[Dict[str, Any]] = Field(default_factory=list, description="Dependency-related patterns")
    
    # Insights
    key_patterns: List[str] = Field(default_factory=list, description="Key patterns identified")
    anomalous_patterns: List[str] = Field(default_factory=list, description="Anomalous patterns")
    
    # Predictions
    predictions: List[Dict[str, Any]] = Field(default_factory=list, description="Pattern-based predictions")
    
    generated_at: datetime = Field(..., description="Analysis generation time")


class AnalysisStatistics(BaseModel):
    """Analysis service statistics."""
    total_analyses: int = Field(..., description="Total analyses performed")
    active_analyses: int = Field(..., description="Currently active analyses")
    completed_analyses: int = Field(..., description="Completed analyses")
    failed_analyses: int = Field(..., description="Failed analyses")
    
    # Performance metrics
    average_duration: float = Field(..., description="Average analysis duration")
    total_processing_time: float = Field(..., description="Total processing time")
    
    # Analysis types
    analysis_type_counts: Dict[str, int] = Field(default_factory=dict, description="Counts by analysis type")
    
    # Trend data
    analyses_last_24h: int = Field(..., description="Analyses in last 24 hours")
    analyses_last_week: int = Field(..., description="Analyses in last week")
    
    # Resource usage
    cpu_usage: float = Field(..., description="Average CPU usage")
    memory_usage: float = Field(..., description="Average memory usage")
    
    generated_at: datetime = Field(..., description="Statistics generation time")