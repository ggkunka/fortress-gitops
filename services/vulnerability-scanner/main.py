#!/usr/bin/env python3
"""
Fortress CNAPP - Production Vulnerability Scanner
Real container image scanning with Trivy, CVE database integration
"""

import asyncio
import json
import subprocess
from datetime import datetime, timezone
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, BackgroundTasks, HTTPException
from pydantic import BaseModel
import structlog
from kafka import KafkaProducer
import httpx
from kubernetes import client, config

logger = structlog.get_logger()

class VulnerabilityFinding(BaseModel):
    vulnerability_id: str
    package_name: str
    installed_version: str
    fixed_version: Optional[str]
    severity: str
    cvss_score: float
    description: str
    references: List[str]
    published_date: Optional[datetime]
    last_modified_date: Optional[datetime]

class ImageScanResult(BaseModel):
    image_name: str
    image_tag: str
    scan_id: str
    scan_date: datetime
    total_vulnerabilities: int
    critical_count: int
    high_count: int
    medium_count: int
    low_count: int
    vulnerabilities: List[VulnerabilityFinding]
    os_family: str
    os_name: str

class VulnerabilityScanner:
    def __init__(self):
        self.kafka_producer = KafkaProducer(
            bootstrap_servers=['kafka:9092'],
            value_serializer=lambda v: json.dumps(v, default=str).encode('utf-8')
        )
        self.k8s_client = None
        self.initialize_k8s()
        
    def initialize_k8s(self):
        """Initialize Kubernetes client for container discovery"""
        try:
            config.load_incluster_config()
            self.k8s_client = client.CoreV1Api()
            logger.info("Kubernetes client initialized")
        except Exception as e:
            logger.warning(f"K8s client init failed: {e}")
    
    async def scan_image_with_trivy(self, image_name: str) -> ImageScanResult:
        """Scan container image using Trivy"""
        try:
            scan_id = f"scan_{image_name.replace(':', '_').replace('/', '_')}_{int(datetime.now().timestamp())}"
            
            # Run Trivy scan
            cmd = [
                'trivy', 'image', 
                '--format', 'json',
                '--severity', 'CRITICAL,HIGH,MEDIUM,LOW',
                image_name
            ]
            
            process = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
            
            if process.returncode != 0:
                raise Exception(f"Trivy scan failed: {process.stderr}")
            
            scan_data = json.loads(process.stdout)
            
            # Parse Trivy results
            vulnerabilities = []
            severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}
            
            for result in scan_data.get('Results', []):
                for vuln in result.get('Vulnerabilities', []):
                    severity = vuln.get('Severity', 'UNKNOWN')
                    if severity in severity_counts:
                        severity_counts[severity] += 1
                    
                    vulnerability = VulnerabilityFinding(
                        vulnerability_id=vuln.get('VulnerabilityID', ''),
                        package_name=vuln.get('PkgName', ''),
                        installed_version=vuln.get('InstalledVersion', ''),
                        fixed_version=vuln.get('FixedVersion'),
                        severity=severity,
                        cvss_score=float(vuln.get('CVSS', {}).get('nvd', {}).get('V3Score', 0.0)),
                        description=vuln.get('Description', ''),
                        references=vuln.get('References', []),
                        published_date=self.parse_date(vuln.get('PublishedDate')),
                        last_modified_date=self.parse_date(vuln.get('LastModifiedDate'))
                    )
                    vulnerabilities.append(vulnerability)
            
            # Extract OS info
            metadata = scan_data.get('Metadata', {})
            os_info = metadata.get('OS', {})
            
            scan_result = ImageScanResult(
                image_name=image_name.split(':')[0],
                image_tag=image_name.split(':')[1] if ':' in image_name else 'latest',
                scan_id=scan_id,
                scan_date=datetime.now(timezone.utc),
                total_vulnerabilities=len(vulnerabilities),
                critical_count=severity_counts['CRITICAL'],
                high_count=severity_counts['HIGH'],
                medium_count=severity_counts['MEDIUM'],
                low_count=severity_counts['LOW'],
                vulnerabilities=vulnerabilities,
                os_family=os_info.get('Family', ''),
                os_name=os_info.get('Name', '')
            )
            
            logger.info(f"Scanned {image_name}: {len(vulnerabilities)} vulnerabilities found")
            return scan_result
            
        except Exception as e:
            logger.error(f"Image scan failed for {image_name}: {e}")
            raise HTTPException(status_code=500, detail=f"Scan failed: {str(e)}")
    
    def parse_date(self, date_str: Optional[str]) -> Optional[datetime]:
        """Parse date string to datetime"""
        if not date_str:
            return None
        try:
            return datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        except:
            return None
    
    async def discover_cluster_images(self) -> List[str]:
        """Discover all container images running in the cluster"""
        if not self.k8s_client:
            return []
        
        images = set()
        
        try:
            # Get all pods across all namespaces
            pods = self.k8s_client.list_pod_for_all_namespaces()
            
            for pod in pods.items:
                for container in pod.spec.containers:
                    if container.image:
                        images.add(container.image)
                        
                # Check init containers too
                if pod.spec.init_containers:
                    for init_container in pod.spec.init_containers:
                        if init_container.image:
                            images.add(init_container.image)
            
            logger.info(f"Discovered {len(images)} unique container images")
            return list(images)
            
        except Exception as e:
            logger.error(f"Failed to discover cluster images: {e}")
            return []
    
    async def publish_scan_result(self, scan_result: ImageScanResult):
        """Publish scan results to Kafka"""
        try:
            topic = "fortress.vulnerabilities.container_scan"
            self.kafka_producer.send(topic, value=scan_result.dict())
            logger.info(f"Published scan result for {scan_result.image_name}")
            
        except Exception as e:
            logger.error(f"Failed to publish scan result: {e}")

# FastAPI Application
app = FastAPI(title="Fortress Vulnerability Scanner", version="1.0.0")
scanner = VulnerabilityScanner()

@app.post("/scan/image")
async def scan_image(image_name: str, background_tasks: BackgroundTasks):
    """Scan a specific container image"""
    background_tasks.add_task(scan_and_publish_image, image_name)
    return {"status": "started", "image": image_name, "message": "Image scan initiated"}

@app.post("/scan/cluster")
async def scan_cluster_images(background_tasks: BackgroundTasks):
    """Scan all images in the Kubernetes cluster"""
    background_tasks.add_task(scan_all_cluster_images)
    return {"status": "started", "message": "Cluster-wide image scanning initiated"}

@app.get("/scan/results/{scan_id}")
async def get_scan_results(scan_id: str):
    """Get scan results by scan ID"""
    # This would typically query a database
    return {"scan_id": scan_id, "status": "completed"}

async def scan_and_publish_image(image_name: str):
    """Background task to scan and publish image results"""
    try:
        scan_result = await scanner.scan_image_with_trivy(image_name)
        await scanner.publish_scan_result(scan_result)
    except Exception as e:
        logger.error(f"Scan task failed for {image_name}: {e}")

async def scan_all_cluster_images():
    """Background task to scan all cluster images"""
    try:
        images = await scanner.discover_cluster_images()
        
        for image in images:
            try:
                scan_result = await scanner.scan_image_with_trivy(image)
                await scanner.publish_scan_result(scan_result)
                
                # Small delay to avoid overwhelming the system
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"Failed to scan image {image}: {e}")
                continue
                
        logger.info(f"Completed scanning {len(images)} images")
        
    except Exception as e:
        logger.error(f"Cluster scan task failed: {e}")

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "vulnerability-scanner"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8091)
