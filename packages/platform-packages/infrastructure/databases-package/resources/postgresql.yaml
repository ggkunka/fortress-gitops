apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-configuration
  namespace: mcp-security
  labels:
    app.kubernetes.io/name: postgresql-config
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: mcp-security-platform
    kpt.dev/package: databases-infrastructure
  annotations:
    config.kubernetes.io/package-path: platform-packages/infrastructure/databases-package
data:
  postgresql.conf: |
    # PostgreSQL configuration for MCP Security Platform
    
    # Connection settings
    max_connections = 200
    shared_buffers = 1GB # kpt-set: ${postgresql_shared_buffers}
    effective_cache_size = 3GB # kpt-set: ${postgresql_effective_cache_size}
    maintenance_work_mem = 256MB
    
    # Write-ahead logging
    wal_buffers = 16MB
    checkpoint_completion_target = 0.9
    min_wal_size = 1GB
    max_wal_size = 4GB
    
    # Query planner
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # Security
    ssl = on
    ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'
    ssl_prefer_server_ciphers = on
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # "local" is for Unix domain socket connections only
    local   all             all                                     md5
    
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            md5
    host    all             all             10.0.0.0/8              md5
    host    all             all             172.16.0.0/12           md5
    host    all             all             192.168.0.0/16          md5
    
    # IPv6 local connections:
    host    all             all             ::1/128                 md5
    
    # Replication connections
    host    replication     postgres        10.0.0.0/8              md5
---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-credentials
  namespace: mcp-security
  labels:
    app.kubernetes.io/name: postgresql-credentials
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: mcp-security-platform
    kpt.dev/package: databases-infrastructure
  annotations:
    config.kubernetes.io/package-path: platform-packages/infrastructure/databases-package
type: Opaque
stringData:
  postgres-password: "POSTGRESQL_PASSWORD_PLACEHOLDER" # kpt-set: ${postgresql_password}
  password: "MCP_USER_PASSWORD_PLACEHOLDER" # kpt-set: ${mcp_user_password}
  username: "mcp_user" # kpt-set: ${postgresql_username}
  database: "mcp_security" # kpt-set: ${postgresql_database}
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: mcp-security
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: mcp-security-platform
    kpt.dev/package: databases-infrastructure
  annotations:
    config.kubernetes.io/package-path: platform-packages/infrastructure/databases-package
spec:
  type: ClusterIP
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  - name: metrics
    port: 9187 # kpt-set: ${metrics_port}
    targetPort: metrics
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgresql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: mcp-security
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: mcp-security-platform
    kpt.dev/package: databases-infrastructure
  annotations:
    config.kubernetes.io/package-path: platform-packages/infrastructure/databases-package
spec:
  serviceName: postgresql
  replicas: 1 # kpt-set: ${postgresql_replicas}
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: postgresql
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: mcp-security-platform
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5"
        ports:
        - name: tcp-postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            cpu: 500m # kpt-set: ${postgresql_cpu_requests}
            memory: 1Gi # kpt-set: ${postgresql_memory_requests}
          limits:
            cpu: 2000m # kpt-set: ${postgresql_cpu_limits}
            memory: 4Gi # kpt-set: ${postgresql_memory_limits}
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: postgresql-data
        - name: config
          mountPath: /etc/postgresql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: config
        configMap:
          name: postgresql-configuration
      - name: init-scripts
        configMap:
          name: postgresql-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd" # kpt-set: ${storage_class}
      resources:
        requests:
          storage: 100Gi # kpt-set: ${postgresql_storage_size}