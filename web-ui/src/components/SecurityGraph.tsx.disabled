import React, { useRef, useEffect, useState, useMemo } from 'react';
import {
  Box,
  IconButton,
  Tooltip,
  Menu,
  MenuItem,
  Chip,
  Typography,
  Card,
  CardContent,
  Drawer,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Button,
  Switch,
  FormControlLabel,
  Slider,
  useTheme,
  alpha,
} from '@mui/material';
import {
  ZoomIn as ZoomInIcon,
  ZoomOut as ZoomOutIcon,
  CenterFocusStrong as CenterIcon,
  FilterList as FilterIcon,
  Settings as SettingsIcon,
  Fullscreen as FullscreenIcon,
  Download as DownloadIcon,
  BugReport as CVEIcon,
  Storage as ClusterIcon,
  Memory as PodIcon,
  Code as ProcessIcon,
  Security as SyscallIcon,
  InsertDriveFile as FileIcon,
  NetworkCheck as NetworkIcon,
} from '@mui/icons-material';
import * as d3 from 'd3';
import { motion, AnimatePresence } from 'framer-motion';
import { CVENode, CVEEdge, SecurityGraph as SecurityGraphType } from '../types/security';

interface SecurityGraphProps {
  width?: number;
  height?: number;
  data?: SecurityGraphType;
  onNodeClick?: (node: CVENode) => void;
  onEdgeClick?: (edge: CVEEdge) => void;
}

const SecurityGraph: React.FC<SecurityGraphProps> = ({
  width = 800,
  height = 600,
  data,
  onNodeClick,
  onEdgeClick,
}) => {
  const theme = useTheme();
  const svgRef = useRef<SVGSVGElement>(null);
  const [selectedNode, setSelectedNode] = useState<CVENode | null>(null);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [filters, setFilters] = useState({
    severity: ['critical', 'high', 'medium', 'low'],
    nodeTypes: ['cve', 'cluster', 'pod', 'process', 'syscall', 'file', 'network'],
    showLabels: true,
    showEdgeLabels: false,
    nodeSize: 50,
    linkDistance: 100,
    chargeStrength: -300,
  });

  // Mock data for demonstration
  const mockData: SecurityGraphType = useMemo(
    () => ({
      nodes: [
        // CVE Nodes
        {
          id: 'cve-2024-1234',
          type: 'cve',
          label: 'CVE-2024-1234',
          severity: 'critical',
          cvssScore: 9.8,
          description: 'Remote Code Execution in nginx',
          metadata: { exploitAvailable: true, patchAvailable: true },
          size: 80,
          color: theme.palette.error.main,
        },
        {
          id: 'cve-2024-5678',
          type: 'cve',
          label: 'CVE-2024-5678',
          severity: 'high',
          cvssScore: 7.5,
          description: 'Privilege Escalation in kernel',
          metadata: { exploitAvailable: false, patchAvailable: true },
          size: 60,
          color: theme.palette.warning.main,
        },
        // Cluster Nodes
        {
          id: 'cluster-prod-1',
          type: 'cluster',
          label: 'Production Cluster 1',
          metadata: { region: 'us-east-1', nodeCount: 10 },
          size: 70,
          color: theme.palette.primary.main,
        },
        {
          id: 'cluster-staging',
          type: 'cluster',
          label: 'Staging Cluster',
          metadata: { region: 'us-west-2', nodeCount: 3 },
          size: 50,
          color: theme.palette.info.main,
        },
        // Pod Nodes
        {
          id: 'pod-nginx-1',
          type: 'pod',
          label: 'nginx-web-1',
          metadata: { namespace: 'default', image: 'nginx:1.20' },
          size: 40,
          color: theme.palette.secondary.main,
        },
        {
          id: 'pod-nginx-2',
          type: 'pod',
          label: 'nginx-web-2',
          metadata: { namespace: 'default', image: 'nginx:1.20' },
          size: 40,
          color: theme.palette.secondary.main,
        },
        {
          id: 'pod-api-1',
          type: 'pod',
          label: 'api-server-1',
          metadata: { namespace: 'api', image: 'node:16' },
          size: 40,
          color: theme.palette.secondary.main,
        },
        // Process Nodes
        {
          id: 'process-nginx',
          type: 'process',
          label: 'nginx master',
          metadata: { pid: 1, command: '/usr/sbin/nginx' },
          size: 30,
          color: theme.palette.success.main,
        },
        {
          id: 'process-worker',
          type: 'process',
          label: 'nginx worker',
          metadata: { pid: 123, command: 'nginx: worker process' },
          size: 25,
          color: theme.palette.success.light,
        },
        // Syscall Nodes
        {
          id: 'syscall-execve',
          type: 'syscall',
          label: 'execve',
          metadata: { frequency: 'high', risk: 'medium' },
          size: 20,
          color: theme.palette.warning.light,
        },
        {
          id: 'syscall-open',
          type: 'syscall',
          label: 'open',
          metadata: { frequency: 'very-high', risk: 'low' },
          size: 15,
          color: theme.palette.info.light,
        },
        // File Nodes
        {
          id: 'file-config',
          type: 'file',
          label: '/etc/nginx/nginx.conf',
          metadata: { permissions: '644', owner: 'root' },
          size: 20,
          color: theme.palette.grey[600],
        },
        // Network Nodes
        {
          id: 'network-80',
          type: 'network',
          label: 'Port 80',
          metadata: { protocol: 'tcp', exposed: true },
          size: 25,
          color: theme.palette.secondary.main,
        },
      ],
      edges: [
        // CVE affects relationships
        { id: 'e1', source: 'cve-2024-1234', target: 'pod-nginx-1', type: 'affects', weight: 1 },
        { id: 'e2', source: 'cve-2024-1234', target: 'pod-nginx-2', type: 'affects', weight: 1 },
        { id: 'e3', source: 'cve-2024-5678', target: 'cluster-prod-1', type: 'affects', weight: 1 },

        // Cluster contains relationships
        { id: 'e4', source: 'cluster-prod-1', target: 'pod-nginx-1', type: 'contains', weight: 1 },
        { id: 'e5', source: 'cluster-prod-1', target: 'pod-nginx-2', type: 'contains', weight: 1 },
        { id: 'e6', source: 'cluster-prod-1', target: 'pod-api-1', type: 'contains', weight: 1 },
        { id: 'e7', source: 'cluster-staging', target: 'pod-nginx-1', type: 'contains', weight: 1 },

        // Pod runs relationships
        { id: 'e8', source: 'pod-nginx-1', target: 'process-nginx', type: 'runs', weight: 1 },
        { id: 'e9', source: 'pod-nginx-2', target: 'process-nginx', type: 'runs', weight: 1 },
        { id: 'e10', source: 'process-nginx', target: 'process-worker', type: 'spawns', weight: 1 },

        // Process calls relationships
        { id: 'e11', source: 'process-nginx', target: 'syscall-execve', type: 'calls', weight: 1 },
        { id: 'e12', source: 'process-worker', target: 'syscall-open', type: 'calls', weight: 1 },

        // File access relationships
        { id: 'e13', source: 'process-nginx', target: 'file-config', type: 'accesses', weight: 1 },

        // Network communication
        { id: 'e14', source: 'pod-nginx-1', target: 'network-80', type: 'communicates', weight: 1 },
        { id: 'e15', source: 'pod-nginx-2', target: 'network-80', type: 'communicates', weight: 1 },
      ],
      layout: 'force',
      filters: {
        severity: ['critical', 'high', 'medium', 'low'],
        nodeTypes: ['cve', 'cluster', 'pod', 'process', 'syscall', 'file', 'network'],
        timeRange: '24h',
      },
    }),
    [theme]
  );

  const graphData = data || mockData;

  // Filter nodes and edges based on current filters
  const filteredData = useMemo(() => {
    const filteredNodes = graphData.nodes.filter((node) => {
      const severityMatch = !node.severity || filters.severity.includes(node.severity);
      const typeMatch = filters.nodeTypes.includes(node.type);
      return severityMatch && typeMatch;
    });

    const nodeIds = new Set(filteredNodes.map((n) => n.id));
    const filteredEdges = graphData.edges.filter(
      (edge) => nodeIds.has(edge.source) && nodeIds.has(edge.target)
    );

    return { nodes: filteredNodes, edges: filteredEdges };
  }, [graphData, filters]);

  // Node type icons
  const getNodeIcon = (type: string) => {
    switch (type) {
      case 'cve':
        return CVEIcon;
      case 'cluster':
        return ClusterIcon;
      case 'pod':
        return PodIcon;
      case 'process':
        return ProcessIcon;
      case 'syscall':
        return SyscallIcon;
      case 'file':
        return FileIcon;
      case 'network':
        return NetworkIcon;
      default:
        return CVEIcon;
    }
  };

  // Initialize D3 force simulation
  useEffect(() => {
    if (!svgRef.current || filteredData.nodes.length === 0) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove();

    const container = svg.append('g');

    // Create zoom behavior
    const zoom = d3
      .zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.1, 4])
      .on('zoom', (event) => {
        container.attr('transform', event.transform);
      });

    svg.call(zoom);

    // Create force simulation
    const simulation = d3
      .forceSimulation(filteredData.nodes as any)
      .force(
        'link',
        d3
          .forceLink(filteredData.edges)
          .id((d: any) => d.id)
          .distance(filters.linkDistance)
      )
      .force('charge', d3.forceManyBody().strength(filters.chargeStrength))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force(
        'collision',
        d3.forceCollide().radius((d: any) => (d.size || 30) / 2 + 5)
      );

    // Create links
    const links = container
      .selectAll('.link')
      .data(filteredData.edges)
      .enter()
      .append('line')
      .attr('class', 'link')
      .attr('stroke', alpha(theme.palette.text.secondary, 0.6))
      .attr('stroke-width', (d: any) => Math.sqrt(d.weight || 1) * 2)
      .attr('marker-end', 'url(#arrowhead)');

    // Create link labels
    const linkLabels = container
      .selectAll('.link-label')
      .data(filteredData.edges)
      .enter()
      .append('text')
      .attr('class', 'link-label')
      .attr('text-anchor', 'middle')
      .attr('font-size', '10px')
      .attr('fill', theme.palette.text.secondary)
      .style('opacity', filters.showEdgeLabels ? 1 : 0)
      .text((d: any) => d.type);

    // Create nodes
    const nodes = container
      .selectAll('.node')
      .data(filteredData.nodes)
      .enter()
      .append('g')
      .attr('class', 'node')
      .style('cursor', 'pointer')
      .call(
        d3
          .drag<any, any>()
          .on('start', (event, d: any) => {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
          })
          .on('drag', (event, d: any) => {
            d.fx = event.x;
            d.fy = event.y;
          })
          .on('end', (event, d: any) => {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
          })
      );

    // Add circles to nodes
    nodes
      .append('circle')
      .attr('r', (d: any) => (d.size || filters.nodeSize) / 2)
      .attr('fill', (d: any) => d.color || theme.palette.primary.main)
      .attr('stroke', theme.palette.background.paper)
      .attr('stroke-width', 2)
      .on('click', (event, d: any) => {
        setSelectedNode(d);
        onNodeClick?.(d);
      })
      .on('mouseover', function (event, d: any) {
        d3.select(this)
          .transition()
          .duration(200)
          .attr('r', ((d.size || filters.nodeSize) / 2) * 1.2)
          .attr('stroke-width', 3);
      })
      .on('mouseout', function (event, d: any) {
        d3.select(this)
          .transition()
          .duration(200)
          .attr('r', (d.size || filters.nodeSize) / 2)
          .attr('stroke-width', 2);
      });

    // Add labels to nodes
    const labels = nodes
      .append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', (d: any) => (d.size || filters.nodeSize) / 2 + 15)
      .attr('font-size', '12px')
      .attr('fill', theme.palette.text.primary)
      .style('opacity', filters.showLabels ? 1 : 0)
      .text((d: any) => d.label);

    // Add severity indicators for CVE nodes
    nodes
      .filter((d: any) => d.type === 'cve' && d.severity)
      .append('circle')
      .attr('r', 8)
      .attr('cx', (d: any) => (d.size || filters.nodeSize) / 2 - 8)
      .attr('cy', (d: any) => -(d.size || filters.nodeSize) / 2 + 8)
      .attr('fill', (d: any) => {
        switch (d.severity) {
          case 'critical':
            return theme.palette.error.main;
          case 'high':
            return theme.palette.warning.main;
          case 'medium':
            return theme.palette.info.main;
          case 'low':
            return theme.palette.success.main;
          default:
            return theme.palette.grey[500];
        }
      })
      .attr('stroke', theme.palette.background.paper)
      .attr('stroke-width', 1);

    // Add arrowhead marker
    svg
      .append('defs')
      .append('marker')
      .attr('id', 'arrowhead')
      .attr('viewBox', '-0 -5 10 10')
      .attr('refX', 13)
      .attr('refY', 0)
      .attr('orient', 'auto')
      .attr('markerWidth', 13)
      .attr('markerHeight', 13)
      .attr('xoverflow', 'visible')
      .append('svg:path')
      .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
      .attr('fill', alpha(theme.palette.text.secondary, 0.6))
      .style('stroke', 'none');

    // Update positions on simulation tick
    simulation.on('tick', () => {
      links
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);

      linkLabels
        .attr('x', (d: any) => (d.source.x + d.target.x) / 2)
        .attr('y', (d: any) => (d.source.y + d.target.y) / 2);

      nodes.attr('transform', (d: any) => `translate(${d.x},${d.y})`);
    });

    // Cleanup function
    return () => {
      simulation.stop();
    };
  }, [filteredData, filters, width, height, theme, onNodeClick]);

  const handleFilterChange = (filterType: string, value: any) => {
    setFilters((prev) => ({ ...prev, [filterType]: value }));
  };

  const handleZoomIn = () => {
    const svg = d3.select(svgRef.current);
    svg.transition().call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1.5);
  };

  const handleZoomOut = () => {
    const svg = d3.select(svgRef.current);
    svg.transition().call(d3.zoom<SVGSVGElement, unknown>().scaleBy as any, 1 / 1.5);
  };

  const handleCenter = () => {
    const svg = d3.select(svgRef.current);
    svg.transition().call(d3.zoom<SVGSVGElement, unknown>().transform as any, d3.zoomIdentity);
  };

  return (
    <Box sx={{ position: 'relative', width: '100%', height: '100%' }}>
      {/* Graph Controls */}
      <Box
        sx={{
          position: 'absolute',
          top: 8,
          right: 8,
          zIndex: 1000,
          display: 'flex',
          gap: 1,
          bgcolor: alpha(theme.palette.background.paper, 0.9),
          borderRadius: 1,
          p: 0.5,
        }}
      >
        <Tooltip title="Zoom In">
          <IconButton size="small" onClick={handleZoomIn}>
            <ZoomInIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Zoom Out">
          <IconButton size="small" onClick={handleZoomOut}>
            <ZoomOutIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Center">
          <IconButton size="small" onClick={handleCenter}>
            <CenterIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Settings">
          <IconButton size="small" onClick={() => setIsSettingsOpen(true)}>
            <SettingsIcon />
          </IconButton>
        </Tooltip>
        <Tooltip title="Download">
          <IconButton size="small">
            <DownloadIcon />
          </IconButton>
        </Tooltip>
      </Box>

      {/* Main SVG */}
      <svg
        ref={svgRef}
        width={width}
        height={height}
        style={{ border: `1px solid ${theme.palette.divider}`, borderRadius: 4 }}
      />

      {/* Node Details Drawer */}
      <Drawer
        anchor="right"
        open={!!selectedNode}
        onClose={() => setSelectedNode(null)}
        PaperProps={{ sx: { width: 400 } }}
      >
        {selectedNode && (
          <Box sx={{ p: 3 }}>
            <Typography variant="h6" gutterBottom>
              {selectedNode.label}
            </Typography>
            <Chip
              label={selectedNode.type.toUpperCase()}
              color="primary"
              size="small"
              sx={{ mb: 2 }}
            />

            {selectedNode.description && (
              <Typography variant="body2" sx={{ mb: 2 }}>
                {selectedNode.description}
              </Typography>
            )}

            {selectedNode.severity && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Severity
                </Typography>
                <Chip
                  label={selectedNode.severity.toUpperCase()}
                  color={
                    selectedNode.severity === 'critical'
                      ? 'error'
                      : selectedNode.severity === 'high'
                        ? 'warning'
                        : selectedNode.severity === 'medium'
                          ? 'info'
                          : 'success'
                  }
                />
              </Box>
            )}

            {selectedNode.cvssScore && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  CVSS Score
                </Typography>
                <Typography variant="h4" color="error">
                  {selectedNode.cvssScore}
                </Typography>
              </Box>
            )}

            <Divider sx={{ my: 2 }} />

            <Typography variant="subtitle2" gutterBottom>
              Metadata
            </Typography>
            <List dense>
              {Object.entries(selectedNode.metadata || {}).map(([key, value]) => (
                <ListItem key={key}>
                  <ListItemText primary={key} secondary={String(value)} />
                </ListItem>
              ))}
            </List>
          </Box>
        )}
      </Drawer>

      {/* Settings Drawer */}
      <Drawer
        anchor="left"
        open={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
        PaperProps={{ sx: { width: 350 } }}
      >
        <Box sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            Graph Settings
          </Typography>

          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>
              Display Options
            </Typography>
            <FormControlLabel
              control={
                <Switch
                  checked={filters.showLabels}
                  onChange={(e) => handleFilterChange('showLabels', e.target.checked)}
                />
              }
              label="Show Node Labels"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={filters.showEdgeLabels}
                  onChange={(e) => handleFilterChange('showEdgeLabels', e.target.checked)}
                />
              }
              label="Show Edge Labels"
            />
          </Box>

          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>
              Node Size
            </Typography>
            <Slider
              value={filters.nodeSize}
              onChange={(_, value) => handleFilterChange('nodeSize', value)}
              min={20}
              max={100}
              valueLabelDisplay="auto"
            />
          </Box>

          <Box sx={{ mb: 3 }}>
            <Typography variant="subtitle2" gutterBottom>
              Link Distance
            </Typography>
            <Slider
              value={filters.linkDistance}
              onChange={(_, value) => handleFilterChange('linkDistance', value)}
              min={50}
              max={200}
              valueLabelDisplay="auto"
            />
          </Box>

          <Divider sx={{ my: 2 }} />

          <Typography variant="subtitle2" gutterBottom>
            Severity Filter
          </Typography>
          {['critical', 'high', 'medium', 'low'].map((severity) => (
            <FormControlLabel
              key={severity}
              control={
                <Switch
                  checked={filters.severity.includes(severity)}
                  onChange={(e) => {
                    const newSeverity = e.target.checked
                      ? [...filters.severity, severity]
                      : filters.severity.filter((s) => s !== severity);
                    handleFilterChange('severity', newSeverity);
                  }}
                />
              }
              label={severity.charAt(0).toUpperCase() + severity.slice(1)}
            />
          ))}

          <Typography variant="subtitle2" gutterBottom sx={{ mt: 2 }}>
            Node Type Filter
          </Typography>
          {['cve', 'cluster', 'pod', 'process', 'syscall', 'file', 'network'].map((type) => (
            <FormControlLabel
              key={type}
              control={
                <Switch
                  checked={filters.nodeTypes.includes(type)}
                  onChange={(e) => {
                    const newTypes = e.target.checked
                      ? [...filters.nodeTypes, type]
                      : filters.nodeTypes.filter((t) => t !== type);
                    handleFilterChange('nodeTypes', newTypes);
                  }}
                />
              }
              label={type.charAt(0).toUpperCase() + type.slice(1)}
            />
          ))}
        </Box>
      </Drawer>
    </Box>
  );
};

export default SecurityGraph;
