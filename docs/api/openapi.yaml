openapi: 3.0.3
info:
  title: MCP Security Assessment Platform API
  description: |
    Comprehensive API documentation for the MCP Security Assessment Platform.
    
    The MCP Security Assessment Platform provides enterprise-grade security scanning,
    vulnerability management, threat intelligence, and compliance capabilities through
    a modern microservices architecture.
    
    ## Key Features
    - **Container & Application Scanning**: Comprehensive vulnerability scanning with multiple engines
    - **Threat Intelligence**: Real-time threat data integration and analysis
    - **Risk Assessment**: AI-powered risk scoring and prioritization
    - **Report Generation**: Multi-format reporting with visualizations
    - **External Integrations**: SIEM, cloud platforms, and ticketing systems
    - **Plugin Marketplace**: Extensible plugin ecosystem
    
    ## Authentication
    The API uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    API requests are rate-limited per user/organization. Check the following headers:
    - `X-RateLimit-Limit`: Maximum requests per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Unix timestamp when window resets
    
    ## Error Handling
    The API returns standard HTTP status codes and structured error responses:
    ```json
    {
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid request parameters",
        "details": [
          {
            "field": "scan_type",
            "message": "must be one of: container, application, infrastructure"
          }
        ]
      }
    }
    ```
  version: 1.0.0
  contact:
    name: MCP Security Platform Team
    email: support@mcp-security.com
    url: https://docs.mcp-security.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://mcp-security.com/terms

servers:
  - url: https://api.mcp-security.com/v1
    description: Production server
  - url: https://api-staging.mcp-security.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Development server

paths:
  # Health and Status
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Get the overall health status of the platform
      operationId: getHealth
      responses:
        '200':
          description: Platform is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Platform is unhealthy or degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /metrics:
    get:
      tags:
        - System
      summary: Get platform metrics
      description: Get comprehensive platform metrics and statistics
      operationId: getMetrics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Platform metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformMetrics'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Refresh an expired JWT token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Scans
  /scans:
    get:
      tags:
        - Scans
      summary: List scans
      description: Get a paginated list of scans with optional filtering
      operationId: listScans
      security:
        - bearerAuth: []
      parameters:
        - name: scan_type
          in: query
          description: Filter by scan type
          schema:
            type: string
            enum: [container, application, infrastructure, compliance]
        - name: status
          in: query
          description: Filter by scan status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
        - name: target_type
          in: query
          description: Filter by target type
          schema:
            type: string
            enum: [image, repository, host, service]
        - name: created_by
          in: query
          description: Filter by user who created the scan
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sort_by
          in: query
          description: Sort field
          schema:
            type: string
            enum: [created_at, updated_at, name, status]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of scans
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Scans
      summary: Create scan
      description: Create a new security scan
      operationId: createScan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanCreateRequest'
      responses:
        '201':
          description: Scan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /scans/{scan_id}:
    get:
      tags:
        - Scans
      summary: Get scan
      description: Get detailed information about a specific scan
      operationId: getScan
      security:
        - bearerAuth: []
      parameters:
        - name: scan_id
          in: path
          required: true
          description: Unique identifier of the scan
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Scans
      summary: Update scan
      description: Update scan configuration or metadata
      operationId: updateScan
      security:
        - bearerAuth: []
      parameters:
        - name: scan_id
          in: path
          required: true
          description: Unique identifier of the scan
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanUpdateRequest'
      responses:
        '200':
          description: Scan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Scans
      summary: Delete scan
      description: Delete a scan and all associated data
      operationId: deleteScan
      security:
        - bearerAuth: []
      parameters:
        - name: scan_id
          in: path
          required: true
          description: Unique identifier of the scan
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Scan deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Cannot delete scan (e.g., scan is running)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /scans/{scan_id}/start:
    post:
      tags:
        - Scans
      summary: Start scan
      description: Start execution of a pending scan
      operationId: startScan
      security:
        - bearerAuth: []
      parameters:
        - name: scan_id
          in: path
          required: true
          description: Unique identifier of the scan
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scan started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResponse'
        '400':
          description: Cannot start scan (e.g., already running)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /scans/{scan_id}/stop:
    post:
      tags:
        - Scans
      summary: Stop scan
      description: Stop a running scan
      operationId: stopScan
      security:
        - bearerAuth: []
      parameters:
        - name: scan_id
          in: path
          required: true
          description: Unique identifier of the scan
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Scan stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResponse'
        '400':
          description: Cannot stop scan (e.g., not running)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Vulnerabilities
  /vulnerabilities:
    get:
      tags:
        - Vulnerabilities
      summary: List vulnerabilities
      description: Get a paginated list of vulnerabilities with filtering options
      operationId: listVulnerabilities
      security:
        - bearerAuth: []
      parameters:
        - name: severity
          in: query
          description: Filter by vulnerability severity
          schema:
            type: string
            enum: [critical, high, medium, low, info]
        - name: status
          in: query
          description: Filter by vulnerability status
          schema:
            type: string
            enum: [open, fixed, ignored, false_positive]
        - name: package_name
          in: query
          description: Filter by package name
          schema:
            type: string
        - name: cve_id
          in: query
          description: Filter by CVE identifier
          schema:
            type: string
        - name: scan_id
          in: query
          description: Filter by scan ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of vulnerabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /vulnerabilities/{vulnerability_id}:
    get:
      tags:
        - Vulnerabilities
      summary: Get vulnerability
      description: Get detailed information about a specific vulnerability
      operationId: getVulnerability
      security:
        - bearerAuth: []
      parameters:
        - name: vulnerability_id
          in: path
          required: true
          description: Unique identifier of the vulnerability
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vulnerability details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Reports
  /reports:
    get:
      tags:
        - Reports
      summary: List reports
      description: Get a paginated list of reports
      operationId: listReports
      security:
        - bearerAuth: []
      parameters:
        - name: report_type
          in: query
          description: Filter by report type
          schema:
            type: string
            enum: [security_dashboard, risk_assessment, compliance, vulnerability, executive_summary]
        - name: status
          in: query
          description: Filter by report status
          schema:
            type: string
            enum: [pending, generating, completed, failed]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of reports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Reports
      summary: Generate report
      description: Generate a new security report
      operationId: generateReport
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportGenerateRequest'
      responses:
        '201':
          description: Report generation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /reports/{report_id}:
    get:
      tags:
        - Reports
      summary: Get report
      description: Get report details or download report file
      operationId: getReport
      security:
        - bearerAuth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: Unique identifier of the report
          schema:
            type: string
            format: uuid
        - name: download
          in: query
          description: Download the report file
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Report details or file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDetailResponse'
            application/pdf:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Integrations
  /integrations:
    get:
      tags:
        - Integrations
      summary: List integrations
      description: Get a list of external system integrations
      operationId: listIntegrations
      security:
        - bearerAuth: []
      parameters:
        - name: integration_type
          in: query
          description: Filter by integration type
          schema:
            type: string
            enum: [siem, cloud_security, threat_intelligence, vulnerability_management, ticketing]
        - name: provider
          in: query
          description: Filter by provider name
          schema:
            type: string
        - name: status
          in: query
          description: Filter by integration status
          schema:
            type: string
            enum: [pending, active, inactive, error]
      responses:
        '200':
          description: List of integrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Integrations
      summary: Create integration
      description: Create a new external system integration
      operationId: createIntegration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationCreateRequest'
      responses:
        '201':
          description: Integration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Plugin Marketplace
  /marketplace/plugins:
    get:
      tags:
        - Plugin Marketplace
      summary: Search plugins
      description: Search and discover plugins in the marketplace
      operationId: searchPlugins
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search query
          schema:
            type: string
        - name: category
          in: query
          description: Filter by plugin category
          schema:
            type: string
        - name: sort_by
          in: query
          description: Sort criteria
          schema:
            type: string
            enum: [relevance, popular, rating, newest, name]
            default: relevance
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Plugin search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginSearchResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /marketplace/plugins/{plugin_id}/install:
    post:
      tags:
        - Plugin Marketplace
      summary: Install plugin
      description: Install a plugin from the marketplace
      operationId: installPlugin
      security:
        - bearerAuth: []
      parameters:
        - name: plugin_id
          in: path
          required: true
          description: Unique identifier of the plugin
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginInstallRequest'
      responses:
        '201':
          description: Plugin installation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginInstallationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "BAD_REQUEST"
              message: "Invalid request parameters"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "NOT_FOUND"
              message: "Resource not found"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Request validation failed"
              details:
                - field: "scan_type"
                  message: "must be one of: container, application, infrastructure"

  schemas:
    # Common schemas
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Human-readable error message
            details:
              type: object
              description: Additional error details

    ValidationErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              enum: [VALIDATION_ERROR]
            message:
              type: string
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [healthy, degraded, unhealthy]
              response_time:
                type: number
              last_check:
                type: string
                format: date-time

    PlatformMetrics:
      type: object
      properties:
        scans:
          type: object
          properties:
            total:
              type: integer
            running:
              type: integer
            completed_today:
              type: integer
        vulnerabilities:
          type: object
          properties:
            total:
              type: integer
            critical:
              type: integer
            high:
              type: integer
            medium:
              type: integer
            low:
              type: integer
        integrations:
          type: object
          properties:
            total:
              type: integer
            active:
              type: integer
            inactive:
              type: integer

    # Authentication schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1

    LoginResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          enum: [bearer]
        expires_in:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/UserProfile'

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        organization:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string

    # Scan schemas
    ScanCreateRequest:
      type: object
      required:
        - name
        - scan_type
        - target_type
        - target_identifier
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        scan_type:
          type: string
          enum: [container, application, infrastructure, compliance]
        target_type:
          type: string
          enum: [image, repository, host, service, url]
        target_identifier:
          type: string
          description: Target to scan (e.g., image name, repository URL, host IP)
        priority:
          type: string
          enum: [low, medium, high, critical]
          default: medium
        configuration:
          type: object
          description: Scan-specific configuration parameters
        scheduled_at:
          type: string
          format: date-time
          description: Schedule scan for future execution
        metadata:
          type: object
          description: Additional metadata for the scan

    ScanUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        priority:
          type: string
          enum: [low, medium, high, critical]
        configuration:
          type: object
        scheduled_at:
          type: string
          format: date-time
        metadata:
          type: object

    ScanResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        scan_type:
          type: string
        target_type:
          type: string
        target_identifier:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, critical]
        progress:
          type: integer
          minimum: 0
          maximum: 100
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        scheduled_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        duration:
          type: integer
          description: Scan duration in seconds

    ScanDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ScanResponse'
        - type: object
          properties:
            configuration:
              type: object
            metadata:
              type: object
            vulnerabilities_summary:
              type: object
              properties:
                total:
                  type: integer
                critical:
                  type: integer
                high:
                  type: integer
                medium:
                  type: integer
                low:
                  type: integer
            logs:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  level:
                    type: string
                    enum: [debug, info, warn, error]
                  message:
                    type: string

    ScanListResponse:
      type: object
      required:
        - scans
        - total
        - limit
        - offset
      properties:
        scans:
          type: array
          items:
            $ref: '#/components/schemas/ScanResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    # Vulnerability schemas
    VulnerabilityResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cve_id:
          type: string
        title:
          type: string
        description:
          type: string
        severity:
          type: string
          enum: [critical, high, medium, low, info]
        cvss_score:
          type: number
          minimum: 0
          maximum: 10
        cvss_vector:
          type: string
        cwe_id:
          type: string
        package_name:
          type: string
        package_version:
          type: string
        fixed_version:
          type: string
        scan_id:
          type: string
          format: uuid
        source:
          type: string
        status:
          type: string
          enum: [open, fixed, ignored, false_positive]
        first_seen:
          type: string
          format: date-time
        last_seen:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    VulnerabilityDetailResponse:
      allOf:
        - $ref: '#/components/schemas/VulnerabilityResponse'
        - type: object
          properties:
            references:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                  source:
                    type: string
            remediation:
              type: object
              properties:
                recommendation:
                  type: string
                steps:
                  type: array
                  items:
                    type: string
            metadata:
              type: object

    VulnerabilityListResponse:
      type: object
      required:
        - vulnerabilities
        - total
        - limit
        - offset
      properties:
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    # Report schemas
    ReportGenerateRequest:
      type: object
      required:
        - name
        - report_type
        - format
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        report_type:
          type: string
          enum: [security_dashboard, risk_assessment, compliance, vulnerability, executive_summary]
        format:
          type: string
          enum: [pdf, html, json, csv, xlsx]
        parameters:
          type: object
          description: Report-specific parameters
        filters:
          type: object
          description: Data filters for the report
        schedule_config:
          type: object
          description: Schedule configuration for recurring reports

    ReportResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        report_type:
          type: string
        format:
          type: string
        status:
          type: string
          enum: [pending, generating, completed, failed]
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        generated_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        file_size:
          type: integer
        download_url:
          type: string
          format: uri

    ReportDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ReportResponse'
        - type: object
          properties:
            parameters:
              type: object
            filters:
              type: object
            metadata:
              type: object

    ReportListResponse:
      type: object
      required:
        - reports
        - total
        - limit
        - offset
      properties:
        reports:
          type: array
          items:
            $ref: '#/components/schemas/ReportResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    # Integration schemas
    IntegrationCreateRequest:
      type: object
      required:
        - name
        - integration_type
        - provider
        - config
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        integration_type:
          type: string
          enum: [siem, cloud_security, threat_intelligence, vulnerability_management, ticketing]
        provider:
          type: string
          minLength: 1
          maxLength: 100
        config:
          type: object
          description: Provider-specific configuration
        credentials:
          type: object
          description: Authentication credentials (encrypted)
        is_enabled:
          type: boolean
          default: true
        settings:
          type: object
          description: Additional settings

    IntegrationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        integration_type:
          type: string
        provider:
          type: string
        status:
          type: string
          enum: [pending, active, inactive, error]
        is_enabled:
          type: boolean
        capabilities:
          type: array
          items:
            type: string
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_sync_at:
          type: string
          format: date-time

    IntegrationListResponse:
      type: object
      required:
        - integrations
        - total
        - limit
        - offset
      properties:
        integrations:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    # Plugin Marketplace schemas
    PluginInstallRequest:
      type: object
      properties:
        configuration:
          type: object
          description: Plugin configuration parameters
        environment:
          type: string
          enum: [production, staging, development]
          default: production

    PluginInstallationResponse:
      type: object
      properties:
        installation_id:
          type: string
          format: uuid
        plugin_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [queued, installing, active, failed]
        message:
          type: string

    PluginSearchResponse:
      type: object
      required:
        - plugins
        - total
        - limit
        - offset
      properties:
        plugins:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              description:
                type: string
              category:
                type: string
              version:
                type: string
              author_name:
                type: string
              rating_average:
                type: number
              download_count:
                type: integer
              is_verified:
                type: boolean
              is_premium:
                type: boolean
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

tags:
  - name: System
    description: Platform health and metrics
  - name: Authentication
    description: User authentication and authorization
  - name: Scans
    description: Security scanning operations
  - name: Vulnerabilities
    description: Vulnerability management
  - name: Reports
    description: Report generation and management
  - name: Integrations
    description: External system integrations
  - name: Plugin Marketplace
    description: Plugin discovery and management